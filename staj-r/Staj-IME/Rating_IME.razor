<div class="container-xxl flex-grow-1 container-p-y">
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <!-- ALTTAKI DIV -->
                <div class="card-body">
                    <form id="formAccountSettings">
                        <div class="row">
                            <div class="mb-3 col-md-6">
                                <label for="no" class="form-label">Numarası:</label>
                                <input class="form-control" type="text" name="bolum" id="no" placeholder="Numara yazınız" @bind="imr.bolum_LfCZkz6"/>
                            </div>

                            <div class="mb-3 col-md-6">
                                <label for="baslama_tarih" class="form-label">İŞLETMEDE MESLEKİ EĞİTİMİ BAŞLAMA TARİHİ: </label>
                                <input class="form-control" type="date" id="baslama_tarih" @bind="imr.baslama_4nZcEd8">
                            </div>

                            <div class="mb-3 col-md-6">
                                <label for="bitis_tarih" class="form-label">İŞLETMEDE MESLEKİ EĞİTİM BİTİŞ TARİHİ: </label>
                                <input class="form-control" type="date" id="bitis_tarih" @bind="imr.bitis_tKLLK9M">
                            </div>

                            <!-- KAYDET BUTTON -->
                            <div style="text-align:center" class="mt-2">
                                <button type="submit" class="btn btn-primary me-2" @onclick=@(async()=>await submit())>Kaydet</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@inject NavigationManager navman
@code {
    [Parameter]
    public UserWToken User { get; set; }
    private bool isUpdate = false;
    public internships inty { get; } = internships.IME;
    private IMERating imr { get; set; } = new IMERating();
    private InternStdPagesController ispc = new InternStdPagesController();

    protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
    {
        var res = await ispc.getIMERating(User.token);
        if (res.isSuccess)
        {
            isUpdate = true;
            imr = res.value;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    async Task submit()
    {
        imr.numara_krHPVVF = User.user.number;
        imr.adsoyad_VJ2M2Nd = User.user.name + " " + User.user.surname;
        if (isUpdate)
        {
            await ispc.updateIMERating(User.token, imr);
        }
        else
        {
            await ispc.addIMERating(User.token, imr);
        }
        navman.NavigateTo("/ime", true);
    }



    void OnSingleCompleted(UploadInfo fileinfo)

    {

        if (fileinfo.File.State == UploadState.Success && fileinfo.File.Type == ".csv")
        {
            var result = fileinfo.File.GetResponse<ResponseModel>();
            fileinfo.File.Url = result.url;
        }

    }

    public class ResponseModel
    {
        public string name { get; set; }

        public string status { get; set; }

        public string url { get; set; }

        public string thumbUrl { get; set; }
    }
}
