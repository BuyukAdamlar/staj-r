<div class="container-xxl flex-grow-1 container-p-y">
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <!-- ALTTAKI DIV -->
                <div class="card-body">
                    <form id="formAccountSettings" method="POST" onsubmit="return false">
                        <div class="row">

                            <div class="mb-3 col-md-6">
                                <label for="name" class="form-label">Yapılan İş:</label>
                                <input class="form-control" type="text" name="name" id="name" placeholder="Yapılan işi yazınız" @bind="dr.yapilan_is_QHt6wvC"/>
                            </div>

                            <div class="mb-3 col-md-6">
                                <label for="html5-date-input" class="form-label">Tarih: </label>
                                <input class="form-control" type="date" id="html5-date-input" @bind="dr.tarih_Rvt9hVm">
                            </div>

                            <div>
                                <label for="exampleFormControlTextarea1" class="form-label">Açıklama:</label>
                                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="dr.aciklama_GT6ExY2"/>
                            </div>
                            <!-- KAYDET BUTTON -->
                            <div style="text-align:center" class="mt-2">
                                <input type="submit" @onclick=@(async()=>await submit()) value="Kaydet" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@inject NavigationManager navman
@code {
    [Parameter]
    public UserWToken User { get; set; }
    [Parameter]
    public internships internType { get; set; }
    [Parameter]
    public int pageNumber { get; set; } = -1;
    DailyReport dr = new DailyReport();
    InternStdPagesController ispc = new InternStdPagesController();
    protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
    {
        if (pageNumber != -1)
        {
            var res = await ispc.getDailyReport(User.token, internType, pageNumber);
            if (res.isSuccess)
            {
                dr=res.value;
            }
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task submit()
    {
        if(pageNumber == -1)
        {
            await ispc.addDailyToReport(User.token, internType, dr);
        }
        else
        {
            await ispc.updateDailyReport(User.token, internType, dr, pageNumber);
        }
        if (internType == internships.StajI)
        {
            navman.NavigateTo("/staj_1", true);
        }
        else if (internType == internships.STAJII)
        {
            navman.NavigateTo("/staj_2", true);
        }
    }


    void OnSingleCompleted(UploadInfo fileinfo)

    {

        if (fileinfo.File.State == UploadState.Success && fileinfo.File.Type == ".csv")
        {
            var result = fileinfo.File.GetResponse<ResponseModel>();
            fileinfo.File.Url = result.url;
        }

    }





    public class ResponseModel
    {
        public string name { get; set; }

        public string status { get; set; }

        public string url { get; set; }

        public string thumbUrl { get; set; }
    }
}

